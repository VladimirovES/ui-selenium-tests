name: Run tests

on:
  workflow_dispatch:
    inputs:
      Marking:
        description: 'marking'
        required: True
        type: choice
        options:
          - regress 
          - profile
          - login
      browser:
        description: "Browser"
        required: true
        type: choice
        options:
          - chrome:100.0
          - firefox:97.0
        default: chrome
      base_url:
        description: "URL"
        required: true
        default: "https://demoqa.com/"
        type: string


  repository_dispatch:
    types: [trigger-run-test]
    
jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: "Set branch env for tests"
        shell: bash
        run: |
          echo "GIT_BRANCH_TESTS=${GITHUB_REF##*/}" >> $GITHUB_ENV

          
      - name: Set values for trigger env
        if: github.event_name == 'repository_dispatch'
        run: |
          echo "BROWSER=chrome:100.0" >> $GITHUB_ENV
          echo "MARKING='regress'" >> $GITHUB_ENV
          

      - name: Set  values for other workflow dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "BROWSER=${{ github.event.inputs.browser }}" >> $GITHUB_ENV
          echo "MARKING=${{ github.event.inputs.marking }}" >> $GITHUB_ENV


      - name: Checkout test code
        uses: actions/checkout@v2
        with:
          ref: ${{ env.GIT_BRANCH_TESTS }}
          path: test-rep

      - name: 'Set name image'
        shell: bash
        run: |
          echo "MY_IMAGE=mytestimage" >> $GITHUB_ENV


      - name: Build Docker image
        run: docker build test-rep/ -t ${{ env.MY_IMAGE}} -f test-rep/Dockerfile


      - name: "Set allure envs"
        shell: bash
        run: |
          echo "ALLURE_FOLDER=results-${{ env.GIT_BRANCH_TESTS }}" >> $GITHUB_ENV

      - name: "Create network"
        shell: bash
        run: |
          if [[ -z "$(docker network ls | grep ${{ env.GIT_BRANCH_TESTS }})" ]]; then docker network create --attachable ${{ env.GIT_BRANCH_TESTS }}; fi

      - name: "Create selenoid"
        shell: bash
        run: |
          if [[ -n "$(docker ps -a | grep ${{ env.GIT_BRANCH_TESTS }}-selenoid)" ]]; then docker rm -f ${{ env.GIT_BRANCH_TESTS }}-selenoid; fi
          
          envsubst < test-rep/browser.json > browser.configured.json
          cat browser.configured.json
          docker pull selenoid/${{ env.BROWSER }}
          
          docker run -d --restart always \
                --network ${{ env.GIT_BRANCH_TESTS }} \
                --network-alias selenoid \
                --hostname selenoid \
                --name ${{ env.GIT_BRANCH_TESTS }}-selenoid \
                --volume /var/run/docker.sock:/var/run/docker.sock \
                aerokube/selenoid:latest -conf /browser.json --container-network ${{ env.GIT_BRANCH_TESTS }}
          docker cp ./browser.configured.json ${{ env.GIT_BRANCH_TESTS }}-selenoid:/browser.json
          docker restart ${{ env.GIT_BRANCH_TESTS }}-selenoid


      - name: "List running containers"
        if: ${{ always() }}
        run: docker ps

      - name: "Run tests and list results directory"
        run: |
          docker run \
            --network ${{ env.GIT_BRANCH_TESTS }} \
            --name ${{ env.GIT_BRANCH_TESTS }}-test \
            ${{ env.MY_IMAGE }} /bin/sh -c "pytest -m ${{ env.MARKING }} --remote_browser --browser_name=${{ env.BROWSER }} --base_url=${{ github.event.inputs.base_url }} --alluredir ${{ env.ALLURE_FOLDER }}; echo 'Listing results directory:'; ls -la ${{ env.ALLURE_FOLDER }}"
            

      #      - name: "Run tests"
#        run: |
#          docker run \
#            --network ${{ env.GIT_BRANCH_TESTS }} \
#            --name ${{ env.GIT_BRANCH_TESTS }}-test \
#            ${{ env.MY_IMAGE }} pytest -m ${{ env.MARKING }} --remote_browser --browser_name=${{ env.BROWSER }} --base_url=${{ github.event.inputs.base_url }} --alluredir ${{ env.ALLURE_FOLDER }}

      - name: "List contents of /selenium-pytest-allure directory"
        if: ${{ always() }}
        run: docker exec ${{ env.GIT_BRANCH_TESTS }}-test ls



      - name: "List directories and files"
        if: ${{ always() }}
        run: docker exec ${{ env.GIT_BRANCH_TESTS }}-test ls

      - name: "List contents of /selenium-pytest-allure directory"
        if: ${{ always() }}
        run: docker exec ${{ env.GIT_BRANCH_TESTS }}-test ls -la /selenium-pytest-allure
    

      - name: "Copy allure results from container"
        if: ${{ always() }}
        run: |
          docker cp ${{ env.GIT_BRANCH_TESTS }}-test:/selenium-pytest-allure/${{ env.ALLURE_FOLDER }} ./allure-results

      - name: "Copy allure results from container"
        if: ${{ always() }}
        run: |
          docker cp ${{ env.GIT_BRANCH_TESTS }}-test:/selenium-pytest-allure/${{ env.ALLURE_FOLDER }} ./

      - name: "Upload Allure results as an artifact"
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: allure-results
          path: ./allure-results
          

          
  
  
          
      
